// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  uuid                  String
  password              String?
  first_name            String?
  last_name             String?
  telephone             Int?
  provider              String?        @default("local")
  email                 String         @unique
  refreshTokenUpdatedAt DateTime?
  refreshToken          String?
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  // payments    User_payment[] @relation(name: "User_payment")
  StoreSession          StoreSession[]
  Cart                  Cart[]
}

model StoreSession {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  user_id    Int?
  user       User?    @relation(fields: [user_id], references: [id])
  cart       Cart     @relation(fields: [cartId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cartId     Int
}

model Cart {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique
  user_id        Int?
  user           User?          @relation(fields: [user_id], references: [id])
  items          CartItem[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  storeSessionId String
  StoreSession   StoreSession[]
}

model CartItem {
  id                 Int            @id @default(autoincrement())
  uuid               String
  cart_id            Int
  cart               Cart           @relation(fields: [cart_id], references: [id])
  product_variant_id String
  product            ProductVariant @relation(fields: [product_variant_id], references: [uuid])
  quantity           Int
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

model Product {
  id              Int                         @id @default(autoincrement())
  uuid            String                      @unique
  slug            String                      @unique
  description     String?                     @default("")
  created_at      DateTime                    @default(now())
  updated_at      DateTime                    @updatedAt
  productVariants ProductVariantsOnProducts[]
}

model ProductVariant {
  id              Int                         @id @default(autoincrement())
  uuid            String                      @unique
  color           String
  description     String?
  slug            String?
  images          String[]
  thumbnail       String
  price           Float
  width           String
  weight          String
  diameter        String
  et              String
  pcd             String
  created_at      DateTime                    @default(now())
  updated_at      DateTime                    @updatedAt
  products        ProductVariantsOnProducts[]
  productInvetory ProductInvetory[]
  CartItem        CartItem[]
}

model ProductInvetory {
  id                 Int            @id @default(autoincrement())
  product_variant_id Int
  product            ProductVariant @relation(fields: [product_variant_id], references: [id])
  quantity           Int
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

model ProductVariantsOnProducts {
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@id([productVariantId, productId])
}

// model User_payment { 
//   id          Int      @id @default(autoincrement())
//   user_id     Int
//   payment_type String
//   provider String
//   account_no Int
//   expire DateTime
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt
//   user        User  @relation( name: "User_payment",fields: [user_id], references: [id], onDelete: Cascade)
// }
